// Code generated by MockGen. DO NOT EDIT.
// Source: ./server/internal/interface/repository/storage/interface.go
//
// Generated by this command:
//
//	mockgen -source=./server/internal/interface/repository/storage/interface.go -destination=./server/internal/mock/mock_storage.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	error "github.com/tomoya.tokunaga/server/internal/domain/entity/error"
	gomock "go.uber.org/mock/gomock"
)

// MockFileStorageRepository is a mock of FileStorageRepository interface.
type MockFileStorageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageRepositoryMockRecorder
	isgomock struct{}
}

// MockFileStorageRepositoryMockRecorder is the mock recorder for MockFileStorageRepository.
type MockFileStorageRepositoryMockRecorder struct {
	mock *MockFileStorageRepository
}

// NewMockFileStorageRepository creates a new mock instance.
func NewMockFileStorageRepository(ctrl *gomock.Controller) *MockFileStorageRepository {
	mock := &MockFileStorageRepository{ctrl: ctrl}
	mock.recorder = &MockFileStorageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorageRepository) EXPECT() *MockFileStorageRepositoryMockRecorder {
	return m.recorder
}

// CreateDirectory mocks base method.
func (m *MockFileStorageRepository) CreateDirectory(ctx context.Context, dirPath string) error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDirectory", ctx, dirPath)
	ret0, _ := ret[0].(error.CustomError)
	return ret0
}

// CreateDirectory indicates an expected call of CreateDirectory.
func (mr *MockFileStorageRepositoryMockRecorder) CreateDirectory(ctx, dirPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectory", reflect.TypeOf((*MockFileStorageRepository)(nil).CreateDirectory), ctx, dirPath)
}

// DeleteDirectory mocks base method.
func (m *MockFileStorageRepository) DeleteDirectory(ctx context.Context, dirPath string) error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectory", ctx, dirPath)
	ret0, _ := ret[0].(error.CustomError)
	return ret0
}

// DeleteDirectory indicates an expected call of DeleteDirectory.
func (mr *MockFileStorageRepositoryMockRecorder) DeleteDirectory(ctx, dirPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectory", reflect.TypeOf((*MockFileStorageRepository)(nil).DeleteDirectory), ctx, dirPath)
}

// DeleteFile mocks base method.
func (m *MockFileStorageRepository) DeleteFile(ctx context.Context, filePath string) error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, filePath)
	ret0, _ := ret[0].(error.CustomError)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileStorageRepositoryMockRecorder) DeleteFile(ctx, filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileStorageRepository)(nil).DeleteFile), ctx, filePath)
}

// FileExists mocks base method.
func (m *MockFileStorageRepository) FileExists(ctx context.Context, filePath string) (bool, error.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileExists", ctx, filePath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error.CustomError)
	return ret0, ret1
}

// FileExists indicates an expected call of FileExists.
func (mr *MockFileStorageRepositoryMockRecorder) FileExists(ctx, filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileExists", reflect.TypeOf((*MockFileStorageRepository)(nil).FileExists), ctx, filePath)
}

// GetAvailableSpace mocks base method.
func (m *MockFileStorageRepository) GetAvailableSpace(ctx context.Context, dirPath string) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableSpace", ctx, dirPath)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetAvailableSpace indicates an expected call of GetAvailableSpace.
func (mr *MockFileStorageRepositoryMockRecorder) GetAvailableSpace(ctx, dirPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableSpace", reflect.TypeOf((*MockFileStorageRepository)(nil).GetAvailableSpace), ctx, dirPath)
}

// UpdateAvailableSpace mocks base method.
func (m *MockFileStorageRepository) UpdateAvailableSpace(sizeChange int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateAvailableSpace", sizeChange)
}

// UpdateAvailableSpace indicates an expected call of UpdateAvailableSpace.
func (mr *MockFileStorageRepositoryMockRecorder) UpdateAvailableSpace(sizeChange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvailableSpace", reflect.TypeOf((*MockFileStorageRepository)(nil).UpdateAvailableSpace), sizeChange)
}

// WriteChunk mocks base method.
func (m *MockFileStorageRepository) WriteChunk(ctx context.Context, reader io.Reader, filePath string) error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteChunk", ctx, reader, filePath)
	ret0, _ := ret[0].(error.CustomError)
	return ret0
}

// WriteChunk indicates an expected call of WriteChunk.
func (mr *MockFileStorageRepositoryMockRecorder) WriteChunk(ctx, reader, filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteChunk", reflect.TypeOf((*MockFileStorageRepository)(nil).WriteChunk), ctx, reader, filePath)
}
