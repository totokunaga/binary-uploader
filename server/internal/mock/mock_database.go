// Code generated by MockGen. DO NOT EDIT.
// Source: ./server/internal/interface/repository/database/interface.go
//
// Generated by this command:
//
//	mockgen -source=./server/internal/interface/repository/database/interface.go -destination=./server/internal/mock/mock_database.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/tomoya.tokunaga/server/internal/domain/entity"
	error "github.com/tomoya.tokunaga/server/internal/domain/entity/error"
	gomock "go.uber.org/mock/gomock"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
	isgomock struct{}
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// CountChunksByStatus mocks base method.
func (m *MockFileRepository) CountChunksByStatus(ctx context.Context, fileID uint64, status entity.FileStatus) (int64, int64, error.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountChunksByStatus", ctx, fileID, status)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error.CustomError)
	return ret0, ret1, ret2
}

// CountChunksByStatus indicates an expected call of CountChunksByStatus.
func (mr *MockFileRepositoryMockRecorder) CountChunksByStatus(ctx, fileID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountChunksByStatus", reflect.TypeOf((*MockFileRepository)(nil).CountChunksByStatus), ctx, fileID, status)
}

// CreateFileWithChunks mocks base method.
func (m *MockFileRepository) CreateFileWithChunks(ctx context.Context, file *entity.File, baseDir string) (*entity.File, error.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileWithChunks", ctx, file, baseDir)
	ret0, _ := ret[0].(*entity.File)
	ret1, _ := ret[1].(error.CustomError)
	return ret0, ret1
}

// CreateFileWithChunks indicates an expected call of CreateFileWithChunks.
func (mr *MockFileRepositoryMockRecorder) CreateFileWithChunks(ctx, file, baseDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileWithChunks", reflect.TypeOf((*MockFileRepository)(nil).CreateFileWithChunks), ctx, file, baseDir)
}

// DeleteFileByID mocks base method.
func (m *MockFileRepository) DeleteFileByID(ctx context.Context, fileID uint64) error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileByID", ctx, fileID)
	ret0, _ := ret[0].(error.CustomError)
	return ret0
}

// DeleteFileByID indicates an expected call of DeleteFileByID.
func (mr *MockFileRepositoryMockRecorder) DeleteFileByID(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileByID", reflect.TypeOf((*MockFileRepository)(nil).DeleteFileByID), ctx, fileID)
}

// GetChunksByFileID mocks base method.
func (m *MockFileRepository) GetChunksByFileID(ctx context.Context, fileID uint64) ([]*entity.FileChunk, error.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChunksByFileID", ctx, fileID)
	ret0, _ := ret[0].([]*entity.FileChunk)
	ret1, _ := ret[1].(error.CustomError)
	return ret0, ret1
}

// GetChunksByFileID indicates an expected call of GetChunksByFileID.
func (mr *MockFileRepositoryMockRecorder) GetChunksByFileID(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunksByFileID", reflect.TypeOf((*MockFileRepository)(nil).GetChunksByFileID), ctx, fileID)
}

// GetChunksByStatus mocks base method.
func (m *MockFileRepository) GetChunksByStatus(ctx context.Context, fileID uint64, statuses []entity.FileStatus) ([]*entity.FileChunk, error.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChunksByStatus", ctx, fileID, statuses)
	ret0, _ := ret[0].([]*entity.FileChunk)
	ret1, _ := ret[1].(error.CustomError)
	return ret0, ret1
}

// GetChunksByStatus indicates an expected call of GetChunksByStatus.
func (mr *MockFileRepositoryMockRecorder) GetChunksByStatus(ctx, fileID, statuses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunksByStatus", reflect.TypeOf((*MockFileRepository)(nil).GetChunksByStatus), ctx, fileID, statuses)
}

// GetFileAndChunk mocks base method.
func (m *MockFileRepository) GetFileAndChunk(ctx context.Context, fileID, chunkNumber uint64) (*entity.File, *entity.FileChunk, error.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileAndChunk", ctx, fileID, chunkNumber)
	ret0, _ := ret[0].(*entity.File)
	ret1, _ := ret[1].(*entity.FileChunk)
	ret2, _ := ret[2].(error.CustomError)
	return ret0, ret1, ret2
}

// GetFileAndChunk indicates an expected call of GetFileAndChunk.
func (mr *MockFileRepositoryMockRecorder) GetFileAndChunk(ctx, fileID, chunkNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileAndChunk", reflect.TypeOf((*MockFileRepository)(nil).GetFileAndChunk), ctx, fileID, chunkNumber)
}

// GetFileByName mocks base method.
func (m *MockFileRepository) GetFileByName(ctx context.Context, name string) (*entity.File, error.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileByName", ctx, name)
	ret0, _ := ret[0].(*entity.File)
	ret1, _ := ret[1].(error.CustomError)
	return ret0, ret1
}

// GetFileByName indicates an expected call of GetFileByName.
func (mr *MockFileRepositoryMockRecorder) GetFileByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileByName", reflect.TypeOf((*MockFileRepository)(nil).GetFileByName), ctx, name)
}

// GetFileNames mocks base method.
func (m *MockFileRepository) GetFileNames(ctx context.Context) ([]string, error.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileNames", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error.CustomError)
	return ret0, ret1
}

// GetFileNames indicates an expected call of GetFileNames.
func (mr *MockFileRepositoryMockRecorder) GetFileNames(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileNames", reflect.TypeOf((*MockFileRepository)(nil).GetFileNames), ctx)
}

// IncrementUploadedChunks mocks base method.
func (m *MockFileRepository) IncrementUploadedChunks(ctx context.Context, id uint64) (uint, uint, error.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementUploadedChunks", ctx, id)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(uint)
	ret2, _ := ret[2].(error.CustomError)
	return ret0, ret1, ret2
}

// IncrementUploadedChunks indicates an expected call of IncrementUploadedChunks.
func (mr *MockFileRepositoryMockRecorder) IncrementUploadedChunks(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementUploadedChunks", reflect.TypeOf((*MockFileRepository)(nil).IncrementUploadedChunks), ctx, id)
}

// UpdateChunksStatus mocks base method.
func (m *MockFileRepository) UpdateChunksStatus(ctx context.Context, chunkIDs []uint64, status entity.FileStatus) error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChunksStatus", ctx, chunkIDs, status)
	ret0, _ := ret[0].(error.CustomError)
	return ret0
}

// UpdateChunksStatus indicates an expected call of UpdateChunksStatus.
func (mr *MockFileRepositoryMockRecorder) UpdateChunksStatus(ctx, chunkIDs, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChunksStatus", reflect.TypeOf((*MockFileRepository)(nil).UpdateChunksStatus), ctx, chunkIDs, status)
}

// UpdateFileAndChunkStatus mocks base method.
func (m *MockFileRepository) UpdateFileAndChunkStatus(ctx context.Context, fileID uint64, chunkIDs []uint64, status entity.FileStatus) error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileAndChunkStatus", ctx, fileID, chunkIDs, status)
	ret0, _ := ret[0].(error.CustomError)
	return ret0
}

// UpdateFileAndChunkStatus indicates an expected call of UpdateFileAndChunkStatus.
func (mr *MockFileRepositoryMockRecorder) UpdateFileAndChunkStatus(ctx, fileID, chunkIDs, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileAndChunkStatus", reflect.TypeOf((*MockFileRepository)(nil).UpdateFileAndChunkStatus), ctx, fileID, chunkIDs, status)
}

// UpdateFileStatus mocks base method.
func (m *MockFileRepository) UpdateFileStatus(ctx context.Context, id uint64, status entity.FileStatus) error.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileStatus", ctx, id, status)
	ret0, _ := ret[0].(error.CustomError)
	return ret0
}

// UpdateFileStatus indicates an expected call of UpdateFileStatus.
func (mr *MockFileRepositoryMockRecorder) UpdateFileStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileStatus", reflect.TypeOf((*MockFileRepository)(nil).UpdateFileStatus), ctx, id, status)
}
