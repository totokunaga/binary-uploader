// Code generated by MockGen. DO NOT EDIT.
// Source: ./cli/internal/usecase/interface.go
//
// Generated by this command:
//
//	mockgen -source=./cli/internal/usecase/interface.go -destination=./cli/internal/mock/mock_usecase.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/tomoya.tokunaga/cli/internal/domain/entity"
	usecase "github.com/tomoya.tokunaga/cli/internal/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockListUsecase is a mock of ListUsecase interface.
type MockListUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockListUsecaseMockRecorder
	isgomock struct{}
}

// MockListUsecaseMockRecorder is the mock recorder for MockListUsecase.
type MockListUsecaseMockRecorder struct {
	mock *MockListUsecase
}

// NewMockListUsecase creates a new mock instance.
func NewMockListUsecase(ctrl *gomock.Controller) *MockListUsecase {
	mock := &MockListUsecase{ctrl: ctrl}
	mock.recorder = &MockListUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListUsecase) EXPECT() *MockListUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockListUsecase) Execute(ctx context.Context) (*entity.ListFilesResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(*entity.ListFilesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockListUsecaseMockRecorder) Execute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockListUsecase)(nil).Execute), ctx)
}

// MockInitUploadUsecase is a mock of InitUploadUsecase interface.
type MockInitUploadUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockInitUploadUsecaseMockRecorder
	isgomock struct{}
}

// MockInitUploadUsecaseMockRecorder is the mock recorder for MockInitUploadUsecase.
type MockInitUploadUsecaseMockRecorder struct {
	mock *MockInitUploadUsecase
}

// NewMockInitUploadUsecase creates a new mock instance.
func NewMockInitUploadUsecase(ctrl *gomock.Controller) *MockInitUploadUsecase {
	mock := &MockInitUploadUsecase{ctrl: ctrl}
	mock.recorder = &MockInitUploadUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitUploadUsecase) EXPECT() *MockInitUploadUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockInitUploadUsecase) Execute(ctx context.Context, input *usecase.InitUploadUsecaseInput) (*usecase.UploadUsecaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].(*usecase.UploadUsecaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockInitUploadUsecaseMockRecorder) Execute(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockInitUploadUsecase)(nil).Execute), ctx, input)
}

// ExecutePrecheck mocks base method.
func (m *MockInitUploadUsecase) ExecutePrecheck(ctx context.Context, input *usecase.InitUploadPrecheckUsecaseInput) (usecase.PostPrecheckAction, *usecase.InitUploadPrecheckUsecaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutePrecheck", ctx, input)
	ret0, _ := ret[0].(usecase.PostPrecheckAction)
	ret1, _ := ret[1].(*usecase.InitUploadPrecheckUsecaseOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExecutePrecheck indicates an expected call of ExecutePrecheck.
func (mr *MockInitUploadUsecaseMockRecorder) ExecutePrecheck(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutePrecheck", reflect.TypeOf((*MockInitUploadUsecase)(nil).ExecutePrecheck), ctx, input)
}

// MockUploadUsecase is a mock of UploadUsecase interface.
type MockUploadUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUploadUsecaseMockRecorder
	isgomock struct{}
}

// MockUploadUsecaseMockRecorder is the mock recorder for MockUploadUsecase.
type MockUploadUsecaseMockRecorder struct {
	mock *MockUploadUsecase
}

// NewMockUploadUsecase creates a new mock instance.
func NewMockUploadUsecase(ctrl *gomock.Controller) *MockUploadUsecase {
	mock := &MockUploadUsecase{ctrl: ctrl}
	mock.recorder = &MockUploadUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadUsecase) EXPECT() *MockUploadUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUploadUsecase) Execute(ctx context.Context, input *usecase.UploadUsecaseInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockUploadUsecaseMockRecorder) Execute(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUploadUsecase)(nil).Execute), ctx, input)
}

// MockDeleteUsecase is a mock of DeleteUsecase interface.
type MockDeleteUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteUsecaseMockRecorder
	isgomock struct{}
}

// MockDeleteUsecaseMockRecorder is the mock recorder for MockDeleteUsecase.
type MockDeleteUsecaseMockRecorder struct {
	mock *MockDeleteUsecase
}

// NewMockDeleteUsecase creates a new mock instance.
func NewMockDeleteUsecase(ctrl *gomock.Controller) *MockDeleteUsecase {
	mock := &MockDeleteUsecase{ctrl: ctrl}
	mock.recorder = &MockDeleteUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteUsecase) EXPECT() *MockDeleteUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockDeleteUsecase) Execute(ctx context.Context, targetFileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, targetFileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockDeleteUsecaseMockRecorder) Execute(ctx, targetFileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDeleteUsecase)(nil).Execute), ctx, targetFileName)
}
