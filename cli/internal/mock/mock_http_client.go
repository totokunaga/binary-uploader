// Code generated by MockGen. DO NOT EDIT.
// Source: ./cli/internal/infrastructure/interface.go
//
// Generated by this command:
//
//	mockgen -source=./cli/internal/infrastructure/interface.go -destination=./cli/internal/mock/mock_http_client.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/tomoya.tokunaga/cli/internal/domain/entity"
	infrastructure "github.com/tomoya.tokunaga/cli/internal/infrastructure"
	gomock "go.uber.org/mock/gomock"
)

// MockFileServerHttpClient is a mock of FileServerHttpClient interface.
type MockFileServerHttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileServerHttpClientMockRecorder
	isgomock struct{}
}

// MockFileServerHttpClientMockRecorder is the mock recorder for MockFileServerHttpClient.
type MockFileServerHttpClientMockRecorder struct {
	mock *MockFileServerHttpClient
}

// NewMockFileServerHttpClient creates a new mock instance.
func NewMockFileServerHttpClient(ctrl *gomock.Controller) *MockFileServerHttpClient {
	mock := &MockFileServerHttpClient{ctrl: ctrl}
	mock.recorder = &MockFileServerHttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServerHttpClient) EXPECT() *MockFileServerHttpClientMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFileServerHttpClient) DeleteFile(ctx context.Context, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileServerHttpClientMockRecorder) DeleteFile(ctx, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileServerHttpClient)(nil).DeleteFile), ctx, fileName)
}

// GetFileStats mocks base method.
func (m *MockFileServerHttpClient) GetFileStats(ctx context.Context, fileName string) (*entity.FileStatsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileStats", ctx, fileName)
	ret0, _ := ret[0].(*entity.FileStatsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileStats indicates an expected call of GetFileStats.
func (mr *MockFileServerHttpClientMockRecorder) GetFileStats(ctx, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileStats", reflect.TypeOf((*MockFileServerHttpClient)(nil).GetFileStats), ctx, fileName)
}

// InitUpload mocks base method.
func (m *MockFileServerHttpClient) InitUpload(ctx context.Context, fileName string, request infrastructure.UploadInitRequest) (*infrastructure.UploadInitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitUpload", ctx, fileName, request)
	ret0, _ := ret[0].(*infrastructure.UploadInitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitUpload indicates an expected call of InitUpload.
func (mr *MockFileServerHttpClientMockRecorder) InitUpload(ctx, fileName, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitUpload", reflect.TypeOf((*MockFileServerHttpClient)(nil).InitUpload), ctx, fileName, request)
}

// ListFiles mocks base method.
func (m *MockFileServerHttpClient) ListFiles(ctx context.Context) (*entity.ListFilesResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx)
	ret0, _ := ret[0].(*entity.ListFilesResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockFileServerHttpClientMockRecorder) ListFiles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockFileServerHttpClient)(nil).ListFiles), ctx)
}

// UploadChunk mocks base method.
func (m *MockFileServerHttpClient) UploadChunk(ctx context.Context, uploadID uint64, chunkID int, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadChunk", ctx, uploadID, chunkID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadChunk indicates an expected call of UploadChunk.
func (mr *MockFileServerHttpClientMockRecorder) UploadChunk(ctx, uploadID, chunkID, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadChunk", reflect.TypeOf((*MockFileServerHttpClient)(nil).UploadChunk), ctx, uploadID, chunkID, data)
}
